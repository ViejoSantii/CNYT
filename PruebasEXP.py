import unittest
from EXP import *
class TestCases (unittest.TestCase):
    def test_canics (self):
          result = canicas (([[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (1, 0)],[(0, 0), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],[(0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],[(1, 0), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)]]), [[(6, 0), (2, 0), (1, 0), (5, 0), (3, 0), (10, 0)]], 1)
          self.assertEqual (result, [[(0, 0)], [(0, 0)], [(12, 0)], [(5, 0)], [(1, 0)], [(9, 0)]])
          
    def test_bullets (self):
          result = bullets ([[(0, 0), (1/6, 0), (5/6, 0)],[(1/3, 0), (1/2, 0), (1/6, 0)],[(2/3, 0), (1/3, 0), (0, 0)]], [[(1/6, 0), (1/6, 0), (2/3, 0)]], 1)
          self.assertEqual (result, [[(0.5833333333333334, 0.0)], [(0.25, 0.0)], [(0.16666666666666666, 0.0)]])
    def test_count_bullets (self):
          result = count_bullets ([[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(1/(2)**(1/2), 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(1/(2)**(1/2), 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(0, 0), (-1/(6)**(1/2), 1/(6)**(1/2)), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0), (0, 0)],[(0, 0), (-1/(6)**(1/2), -1/(6)**(1/2)), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0), (0, 0)],[(0, 0), (1/(6)**(1/2), -1/(6)**(1/2)), (-1/(6)**(1/2), 1/(6)**(1/2)), (0, 0), (0, 0), (1, 0), (0, 0), (0, 0)],[(0, 0), (0, 0), (-1/(6)**(1/2), -1/(6)**(1/2)), (0, 0), (0, 0), (0, 0), (1, 0), (0, 0)],[(0, 0), (0, 0), (1/(6)**(1/2), -1/(6)**(1/2)), (0, 0), (0, 0), (0, 0), (0, 0), (1, 0)]], 1)
          self.assertEqual (result, [[0, 0, 0, 0, 0, 0, 0, 0], [0.4999999999999999, 0, 0, 0, 0, 0, 0, 0], [0.4999999999999999, 0, 0, 0, 0, 0, 0, 0], [0, 0.3333333333333334, 0, 1, 0, 0, 0, 0], [0, 0.3333333333333334, 0, 0, 1, 0, 0, 0], [0, 0.3333333333333334, 0.3333333333333334, 0, 0, 1, 0, 0], [0, 0, 0.3333333333333334, 0, 0, 0, 1, 0], [0, 0, 0.3333333333333334, 0, 0, 0, 0, 1]])
    
    def test_probabilidadket (self):
          result = probabilidadket (2, [(-3, -1), (0, -2), (0, 1), (2, 0)])
          self.assertEqual (result, 0.05263157894736841)

    def test_amplitud_ket (self):
          result = amplitudket (((2**0.5) / 2, 0), ((2**0.5) / 2, 0), [(1, 0), (0, 1)], [(0, 1), (-1, 0)])
          self.assertEqual (result, (0.0, -1.0000000000000002))

    def test_valor_prom (self):
          result = valor_prom ([((2**0.5) / 2, 0), (0, (2**0.5) / 2)], [[(1, 0), (0, -1)], [(0, 1), (2, 0)]])
          self.assertEqual (result, (2.5000000000000004, 0.0))

    def test_varianza(self):
          result = varianza ([[(1, 0), (0, -1)], [(0, 1), (2, 0)]], [((2**0.5) / 2, 0), (0, (2**0.5) / 2)])
          self.assertEqual (result, 2.2500000000000013)

    def test_transitor_probabilidad(self):
          result = transitor_probabilidad ([[(-1,0),(0,-1)],[(0,1),(1,0)]], [(1/2,0),(1/2,0)]) 
          self.assertEqual (result, 0)
          
    def test_sistema(self):
          result = sistema (4, [[(0,0),(1/(2)**0.5,0),(1/(2)**0.5,0),(0,0)],[(0,1/(2)**0.5),(0,0),(0,0),(1/(2)**0.5,0)],[(1/(2)**0.5,0),(0,0),(0,0),(0,1/(2)**0.5)],[(0,0),(1/(2)**0.5,0),(-1/(2)**0.5,0),(0,0)]], [(1,0),(0,0),(0,0),(0,0)])
          self.assertEqual (result, [(-0.49999999999999983, 0.49999999999999983), (0.0, 0.0), (0.0, 0.0), (0.49999999999999983, 0.49999999999999983)])
          
if __name__ == '__main__':
    unittest.main()
